# library_bot.py
import sqlite3
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes


# ‚úÖ DATABASE SETUP
def create_table():
    conn = sqlite3.connect("./sqlite3/library.db")
    cursor = conn.cursor()
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS allbooks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            author TEXT NOT NULL,
            is_borrowed INTEGER DEFAULT 0,
            borrowed_by TEXT
        )
    """
    )
    conn.commit()
    conn.close()


# üî∞ /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã ‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶¨‡¶ü! \n/start - ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá, \n /addbook <title> <author> - ‡¶¨‡¶á ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá, \n/listbooks - ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶¨‡¶á‡ßü‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá‡•§ \nüìö ‡¶¨‡¶á ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá /addbook ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã‡•§")


# ‚ûï /addbook command
async def addbook(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("üìö ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /addbook <title> <author>")
        return
    title = args[0]
    author = " ".join(args[1:])

    conn = sqlite3.connect("./sqlite3/library.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO allbooks (title, author) VALUES (?, ?)", (title, author))
    conn.commit()
    conn.close()

    await update.message.reply_text(f"‚úÖ ‡¶¨‡¶á ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá‡¶õ‡ßá: {title} - {author}")


# üìñ /listbooks command
async def listbooks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("./sqlite3/library.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, title, author, is_borrowed FROM allbooks")
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("üòï ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡¶á ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
        return

    message = "üìö ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶¨‡¶á‡ßü‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:\n\n"
    for row in rows:
        status = "‚úÖ Available" if row[3] == 0 else "‚ùå Borrowed"
        message += f"üîπ ID: {row[0]} | {row[1]} - {row[2]} [{status}]\n"

    await update.message.reply_text(message)


# ‚úÖ BOT STARTUP
def main():
    create_table()
    app = ApplicationBuilder().token("7979706249:AAEjNtitBa3g9Vw_hv-COeDyQrWisFODtns").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addbook", addbook))
    app.add_handler(CommandHandler("listbooks", listbooks))

    print("ü§ñ Library Bot ‡¶ö‡¶≤‡¶õ‡ßá...")
    app.run_polling()


if __name__ == "__main__":
    main()
